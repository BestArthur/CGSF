
#ifndef INETWORKENGINE_H_
#define INETWORKENGINE_H_



#ifdef NETWORKENGINE_EXPORTS
#define NETWORKENGINEDECL __declspec(dllexport)
#else
#define NETWORKENGINEDECL __declspec(dllimport)
#endif

class INetworkEngine
{
  public:
    virtual ~INetworkEngine() {};

	virtual bool Start(char* szIP, unsigned short Port) = 0;
    virtual bool Shutdown() = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////
//클라이언트가 연결되었을 때
// return value : 해당 클라이언트의 고유 시리얼
////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int OnConnect() = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////
//클라이언트가 연결 종료되었을 때
// Arg1 : 종료되는 클라이언트의 고유 시리얼
////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool OnDisconnect(int Serial) = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////
//네트워크 엔진에서 패킷 자르기 기능이 존재하지 않을 시 호출(기본 패킷 분석기가 호출)
////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool OnData(int Serial, char* pData, unsigned short Length) = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////
//네트워크 엔진에서 패킷 자르기 기능이 존재할 시 호출
////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool OnData(int Serial, int PacketID, char* pData, unsigned short Length) = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////
//강제로 클라이언트의 연결을 종료하고 싶을 때
////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool DisconnectClient(int Serial) = 0;
};


typedef INetworkEngine * (* CREATENETWORKENGINE)();

extern "C" NETWORKENGINEDECL INetworkEngine * CreateNetworkEngine();


#endif  // IPLUGIN_H_
